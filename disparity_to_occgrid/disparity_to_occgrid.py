"""
    Class that uses the segmented image and point cloud generated by the ZED camera to convert into a 
    Occupancy grid
"""

import rospy 
import numba
import rosparam

from nav_msgs.msg import OccupancyGrid
from sensor_msgs.msg import *
from cv_bridge import CvBridge, CvBridgeError
from doc_utils import *
from image_geometry.cameramodels import StereoCameraModel

class DisparityToOccGrid:

    def __init__(self):
        segSub = rosparam.get_param("segmented_topic")
        dispSub = rosparam.get_param("disparity_topic")
        layersFile = rosparam.get_param("layers_File")
        file = open(layersFile)
        self.layers = json.load(file)
        self.objects = self.layers[0]["objects"]
        self.bridge = CvBridge()
        leftCamInfo = rosparam.get_param("left_cam_info")
        rightCamInfo = rosparam.get_param("right_cam_info")
        self.listener(segSub,dispSub,leftCamInfo,rightCamInfo)

    def ImageCallback(self,data):
        img = self.bridge.imgmsg_to_cv2(data)
        cords = getIndicesOfObjects(img,self.objects)
        points = getPointsTo3D(cords,self.disparityImage)
        print(points)

    def dispCallback(self,data):
        self.disparityImage = self.bridge.imgmsg_to_cv2(data.image)

    def listener(self, segSub, dispSub, leftCamInfo, rightCamInfo):
        rospy.init_node("PCL_OccGrid")
        sub = rospy.Subscriber(segSub, Image,self.ImageCallback)
        disparitySub = rospy.Subscriber(dispSub,Image,self.dispCallback)
        self.leftCamInfo = rospy.wait_for_message(leftCamInfo, CameraInfo)
        self.rightCamInfo = rospy.wait_for_message(rightCamInfo, CameraInfo)








