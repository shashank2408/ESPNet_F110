"""
    Class that uses the segmented image and point cloud generated by the ZED camera to convert into a 
    Occupancy grid
"""

import rospy 
import numba
import rosparam

from nav_msgs.msg import OccupancyGrid
from sensor_msgs.msg import *
from sensor_msgs.msg import *
from cv_bridge import CvBridge, CvBridgeError

class PclToOccGrid:

    def __init__(self):
        segSub = rosparam.get_param("segmented_topic")
        pclSub = rosparam.get_param("PCL_topic")
        layersFile = rosparam.get_param("layers_File")
        file = open(layersFile)
        self.layers = json.load(file)
        self.objects = self.layers[0]["objects"]
        self.bridge = CvBridge()
        leftCamInfo = rosparam.get_param("left_cam_info")
        rightCamInfo = rosparam.get_param("right_cam_info")

        self.listener(segSub,pclSub)


        self.cords = None

    def ImageCallback(self,data):
        img = self.bridge.imgmsg_to_cv2(data)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        self.cords = getIndicesOfObjects(gray,self.objects)


    def PCLCallback(self, data):
        points = point_cloud2.read_points(pcl)
        if self.cords is not None:
            pointsMap = list(map(lambda cord : getCordsinPCL(points, data.width), self.cords))
            pointsGrid = list(map(imgToGrid, pointsMap))

    def listener(self, segSub, pclSub):
        rospy.init_node("PCL_OccGrid")
        sub = rospy.Subscriber(segSub, Image,ImageCallback)



