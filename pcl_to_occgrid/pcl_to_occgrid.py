"""
    Class that uses the segmented image and point cloud generated by the ZED camera to convert into a 
    Occupancy grid
"""

import rospy 
import numba
import rosparam
import json

from nav_msgs.msg import OccupancyGrid
from sensor_msgs.msg import *
from sensor_msgs.msg import *
from cv_bridge import CvBridge, CvBridgeError
from pcl_utils import *
import sensor_msgs.point_cloud2 as pc2

class PclToOccGrid:

    def __init__(self):
        segSub = rosparam.get_param("segmented_topic")
        pclSub = rosparam.get_param("PCL_topic")
        layersFile = rosparam.get_param("layers_File")
        file = open(layersFile)
        #self.layers = json.load(file)
        #self.objects = self.layers[0]["objects"]
        self.objects = [7,0]
        self.bridge = CvBridge()
        leftCamInfo = rosparam.get_param("left_cam_info")
        rightCamInfo = rosparam.get_param("right_cam_info")

        self.listener(segSub,pclSub)


        self.cords = None

    def ImageCallback(self,data):
        img = self.bridge.imgmsg_to_cv2(data)
        self.cords = getIndicesOfObjects(img,self.objects)


    def PCLCallback(self, data):
        points = list(pc2.read_points(data,field_names = ("x", "y", "z")))
        if self.cords is not None:
            pointsMap = list(map(lambda cord : getCordsinPCL(points, cord, data.height,data.width), self.cords))
            gridPoints = list(map(imgToGrid, pointsMap))
            print(gridPoints)

    def listener(self, segSub, pclSub):
        rospy.init_node("PCL_OccGrid")
        sub = rospy.Subscriber(segSub, Image,self.ImageCallback)
        cloud_sub = rospy.Subscriber(pclSub, PointCloud2, self.PCLCallback)
	

if __name__ == "__main__":
	pco = PclToOccGrid()
	rospy.spin()
